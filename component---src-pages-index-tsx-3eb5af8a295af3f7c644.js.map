{"version":3,"file":"component---src-pages-index-tsx-3eb5af8a295af3f7c644.js","mappings":"4MAwEA,UAjEuC,SAAHA,GAA4B,IAADC,EAArBC,EAAIF,EAAJE,KAAMC,EAAQH,EAARG,SACxCC,GAAkC,QAAtBH,EAAAC,EAAKG,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBM,QAAK,QACzCC,EAAQN,EAAKO,OAAOC,MAE1B,OAAqB,IAAjBF,EAAMG,OAENC,EAAAA,cAACC,EAAAA,EAAM,CAACV,SAAUA,EAAUI,MAAOH,GACjCQ,EAAAA,cAACE,EAAAA,GAAG,CAACP,MAAM,cACXK,EAAAA,cAACG,EAAAA,GAAG,MACJH,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,qDAQPA,EAAAA,cAACC,EAAAA,EAAM,CAACV,SAAUA,EAAUI,MAAOH,GACjCQ,EAAAA,cAACE,EAAAA,GAAG,CAACP,MAAM,cACXK,EAAAA,cAAA,MAAII,UAAU,2CACXR,EAAMS,KAAI,SAAAC,EAA4BC,GAAmB,IAA5CC,EAAIF,EAAJE,KACNb,EAAQa,EAAKC,YAAYd,OAASa,EAAKE,OAAOC,KAC9CC,EAAoB,IAAVL,EAAc,QAAU,QACxC,OACEP,EAAAA,cAAA,MAAIa,IAAKL,EAAKE,OAAOC,KAAMP,UAAWQ,GACpCZ,EAAAA,cAAA,WAASc,WAAS,EAACC,SAAS,6BAC1Bf,EAAAA,cAAA,cACEA,EAAAA,cAAA,SAAOI,UAAU,wCACdI,EAAKC,YAAYO,MAEpBhB,EAAAA,cAAA,MAAII,UAAU,kDACZJ,EAAAA,cAACiB,EAAAA,KAAI,CACHC,GAAIV,EAAKE,OAAOC,KAChBQ,SAAS,MACTf,UAAU,oEAEVJ,EAAAA,cAAA,QAAMmB,SAAS,YAAYxB,MAIjCK,EAAAA,cAAA,KACEoB,wBAAyB,CACvBC,OAAQb,EAAKc,SAAWd,EAAKC,YAAYc,aAE3CJ,SAAS,cACTf,UAAU,wCAEZJ,EAAAA,cAAA,WAASI,UAAU,qEACfI,EAAKC,YAAYe,MAAQ,IACxBC,MAAM,KACNpB,KAAI,SAACqB,GAAS,OAAKA,EAAEC,MAAM,IAC3BtB,KAAI,SAACqB,GAAS,OACb1B,EAAAA,cAAA,QAAMa,IAAKa,GAAE,IAAMA,EAAW,MAM5C,KAIR,C","sources":["webpack://gatsby-starter-tailwind-mdx-blog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport { Bio, Seo } from \"@/components/common\"\nimport Layout from \"@/components/Layout\"\nimport { INode, PageProps } from \"@/definitions\"\n\nconst BlogIndex: React.FC<PageProps> = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMdx.edges\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <br/>\n        <p>\n          Come back later, I'm still working on this site!\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <ol className=\"divide-y divide-skin-fg-muted max-w-2xl\">\n        {posts.map(({ node }: { node: INode }, index: number) => {\n          const title = node.frontmatter.title || node.fields.slug\n          const classes = index === 0 ? \"pb-12\" : \"py-12\"\n          return (\n            <li key={node.fields.slug} className={classes}>\n              <article itemScope itemType=\"http://schema.org/Article\">\n                <header>\n                  <small className=\"font-yrsa text-skin-fg-muted text-lg\">\n                    {node.frontmatter.date}\n                  </small>\n                  <h2 className=\"text-2xl font-exo font-black text-skin-fg mt-3\">\n                    <Link\n                      to={node.fields.slug}\n                      itemProp=\"url\"\n                      className=\"rounded-md focus:outline-none focus:ring-4 focus:ring-skin-focus\"\n                    >\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                </header>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.excerpt || node.frontmatter.description,\n                  }}\n                  itemProp=\"description\"\n                  className=\"text-lg font-yrsa text-skin-fg mt-3\"\n                />\n                <section className=\"font-yrsa text-skin-fg-muted uppercase md:text-sm space-x-2 mt-3\">\n                  {(node.frontmatter.tags || \"\")\n                    .split(\",\")\n                    .map((s: string) => s.trim())\n                    .map((s: string) => (\n                      <span key={s}>{`#${s}`}</span>\n                    ))}\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","_data$site$siteMetada","data","location","siteTitle","site","siteMetadata","title","posts","allMdx","edges","length","React","Layout","Seo","Bio","className","map","_ref2","index","node","frontmatter","fields","slug","classes","key","itemScope","itemType","date","Link","to","itemProp","dangerouslySetInnerHTML","__html","excerpt","description","tags","split","s","trim"],"sourceRoot":""}